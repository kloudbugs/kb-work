    1. Download the Project from Replit
       # On your Replit project, in the Files panel:
       # Click the three dots (...)
       # Select "Download as zip"
    • Transfer to Your Ubuntu Machine
# Copy the ZIP file to your Ubuntu machine using a USB drive
# Or use a secure file transfer method if machines are connected
Set Up the Project on Ubuntu
# Create a project directory
mkdir -p ~/kloudbugs-mining
cd ~/kloudbugs-mining
# Extract the zip file (assuming it's in your Downloads folder)
unzip ~/Downloads/your-project.zip -d .
# Install Node.js and npm if not already installed
sudo apt update
sudo apt install -y nodejs npm
# Install PostgreSQL
sudo apt install -y postgresql postgresql-contrib
# Start PostgreSQL service
sudo systemctl start postgresql
sudo systemctl enable postgresql
Set Up the Database
# Connect to PostgreSQL
sudo -u postgres psql
# In the PostgreSQL prompt:
CREATE DATABASE kloudbugs_db;
CREATE USER kloudbugs_user WITH PASSWORD 'your_secure_password';
GRANT ALL PRIVILEGES ON DATABASE kloudbugs_db TO kloudbugs_user;
\q
# Create database tables (using your project's schema)
# Use the database migration file in your project
cd ~/kloudbugs-mining
npm run db:push
Configure Environment Variables
# Create .env file
cd ~/kloudbugs-mining
touch .env
# Edit the .env file
nano .env
# Add these lines:
DATABASE_URL=postgresql://kloudbugs_user:your_secure_password@localhost:5432/kloudbugs_db
NODE_ENV=development
PORT=3000
# Add any other required environment variables
    • Install Project Dependencies
# Install dependencies
cd ~/kloudbugs-mining
npm install
Run Your Application in a Controlled Environment
# Start the application
npm run dev
# Your app will be available at:
# http://localhost:3000
Restrict Access for Maximum Security
# Install UFW firewall if not already installed
sudo apt install -y ufw
# Allow SSH access (if needed)
sudo ufw allow ssh
# Only allow local network access to your app
sudo ufw allow from 192.168.0.0/24 to any port 3000
# Deny other external access
sudo ufw enable
Create Backup Scripts for Data Safety
# Create a backup script
nano ~/backup-kloudbugs.sh
# Add this content:
#!/bin/bash
TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
BACKUP_DIR=~/kloudbugs-backups
mkdir -p $BACKUP_DIR
# Backup database
pg_dump -U kloudbugs_user kloudbugs_db > $BACKUP_DIR/db-backup-$TIMESTAMP.sql
# Backup code files
tar -czf $BACKUP_DIR/code-backup-$TIMESTAMP.tar.gz -C ~/kloudbugs-mining .
echo "Backup completed: $TIMESTAMP"
# Make script executable
chmod +x ~/backup-kloudbugs.sh
# Run it manually whenever you want to create a backup
~/backup-kloudbugs.sh
This complete setup ensures your application runs in a controlled environment with real data, without using GitHub or exposing your code publicly. You can test everything locally while maintaining full control over your intellectual property.
ok
57 minutes ago
